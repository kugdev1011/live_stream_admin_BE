basePath: /
definitions:
  dto.AdminLogRespDTO:
    properties:
      action:
        type: string
      details:
        type: string
      id:
        type: integer
      performed_at:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponseDTO'
    type: object
  dto.ChangePasswordRequest:
    properties:
      confirm_password:
        maxLength: 255
        minLength: 8
        type: string
      password:
        maxLength: 255
        minLength: 8
        type: string
    required:
    - confirm_password
    - password
    type: object
  dto.DeactiveUserRequest:
    properties:
      reason:
        maxLength: 255
        minLength: 3
        type: string
    required:
    - reason
    type: object
  dto.ForgetPasswordDTO:
    properties:
      email:
        maxLength: 100
        type: string
    required:
    - email
    type: object
  dto.LoginDTO:
    properties:
      email:
        maxLength: 100
        type: string
      password:
        maxLength: 255
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      avatar:
        type: string
      display_name:
        type: string
      email:
        type: string
      expired_time:
        type: string
      id:
        type: integer
      role:
        $ref: '#/definitions/model.RoleType'
      token:
        type: string
      username:
        type: string
    type: object
  dto.ResetPasswordDTO:
    properties:
      confirmPassword:
        minLength: 8
        type: string
      otp:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - confirmPassword
    - otp
    - password
    type: object
  dto.RoleDTO:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      type:
        $ref: '#/definitions/model.RoleType'
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/dto.UserResponseDTO'
        type: array
    type: object
  dto.UpdateUserRequest:
    properties:
      display_name:
        maxLength: 100
        minLength: 3
        type: string
      email:
        maxLength: 100
        type: string
      role_type:
        allOf:
        - $ref: '#/definitions/model.RoleType'
        enum:
        - admin
        - streamer
        - user
      updated_by_id:
        type: integer
      username:
        maxLength: 50
        minLength: 3
        type: string
    type: object
  dto.UpdateUserResponse:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      display_name:
        type: string
      email:
        type: string
      id:
        type: integer
      role:
        $ref: '#/definitions/model.RoleType'
      status:
        $ref: '#/definitions/model.UserStatusType'
      username:
        type: string
    type: object
  dto.UserResponseDTO:
    properties:
      avatar_file_name:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/dto.UserResponseDTO'
      created_by_id:
        type: integer
      deleted_by_id:
        type: integer
      display_name:
        type: string
      email:
        type: string
      id:
        type: integer
      role:
        $ref: '#/definitions/dto.RoleDTO'
      role_id:
        type: integer
      status:
        $ref: '#/definitions/model.UserStatusType'
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/dto.UserResponseDTO'
      updated_by_id:
        type: integer
      username:
        type: string
    type: object
  dto.UserStatisticsResponse:
    properties:
      display_name:
        type: string
      role_type:
        $ref: '#/definitions/model.RoleType'
      total_comments:
        type: integer
      total_likes:
        type: integer
      total_streams:
        type: integer
      total_views:
        type: integer
      user_id:
        type: integer
      username:
        type: string
    type: object
  model.RoleType:
    enum:
    - super_admin
    - admin
    - streamer
    - user
    type: string
    x-enum-varnames:
    - SUPPERADMINROLE
    - ADMINROLE
    - STREAMER
    - USERROLE
  model.UserStatusType:
    enum:
    - online
    - offline
    - blocked
    type: string
    x-enum-varnames:
    - ONLINE
    - OFFLINE
    - BLOCKED
  utils.PaginationModel-dto_AdminLogRespDTO:
    properties:
      current_page:
        type: integer
      exec_time:
        type: number
      index:
        type: integer
      is_new_filter:
        type: boolean
      length:
        type: integer
      next:
        type: integer
      obj:
        additionalProperties: true
        type: object
      page:
        items:
          $ref: '#/definitions/dto.AdminLogRespDTO'
        type: array
      page_size:
        type: integer
      previous:
        type: integer
      query:
        type: string
      route:
        type: string
      total_items:
        type: integer
    type: object
  utils.PaginationModel-dto_UserResponseDTO:
    properties:
      current_page:
        type: integer
      exec_time:
        type: number
      index:
        type: integer
      is_new_filter:
        type: boolean
      length:
        type: integer
      next:
        type: integer
      obj:
        additionalProperties: true
        type: object
      page:
        items:
          $ref: '#/definitions/dto.UserResponseDTO'
        type: array
      page_size:
        type: integer
      previous:
        type: integer
      query:
        type: string
      route:
        type: string
      total_items:
        type: integer
    type: object
  utils.PaginationModel-dto_UserStatisticsResponse:
    properties:
      current_page:
        type: integer
      exec_time:
        type: number
      index:
        type: integer
      is_new_filter:
        type: boolean
      length:
        type: integer
      next:
        type: integer
      obj:
        additionalProperties: true
        type: object
      page:
        items:
          $ref: '#/definitions/dto.UserStatisticsResponse'
        type: array
      page_size:
        type: integer
      previous:
        type: integer
      query:
        type: string
      route:
        type: string
      total_items:
        type: integer
    type: object
host: localhost:8686
info:
  contact: {}
  description: Swagger API Admin Live Stream.
  title: Admin API Live Stream
  version: "1.0"
paths:
  /api/admins/{id}:
    get:
      consumes:
      - application/json
      description: Get admin details by ID
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Admin details
          schema:
            $ref: '#/definitions/dto.UserResponseDTO'
        "400":
          description: Invalid ID parameter or not found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get Admin by ID
      tags:
      - Admin
  /api/admins/actions:
    get:
      consumes:
      - application/json
      description: Get actions for admin logs
      produces:
      - application/json
      responses:
        "200":
          description: Admin actions
          schema:
            items:
              type: string
            type: array
      security:
      - Bearer: []
      summary: Get Admin Actions
      tags:
      - Admin
  /api/admins/logs:
    get:
      consumes:
      - application/json
      description: Get logs for the current admin
      parameters:
      - in: query
        maxLength: 255
        name: action
        type: string
      - enum:
        - details
        - username
        - email
        in: query
        name: filter_by
        type: string
      - in: query
        name: is_me
        type: boolean
      - in: query
        maxLength: 255
        name: keyword
        type: string
      - in: query
        maximum: 20
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 1
        name: page
        type: integer
      - enum:
        - DESC
        - ASC
        in: query
        name: sort
        type: string
      - enum:
        - performed_at
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Admin logs
          schema:
            $ref: '#/definitions/utils.PaginationModel-dto_AdminLogRespDTO'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get Admin Logs
      tags:
      - Admin
  /api/auth/forgetPassword:
    post:
      consumes:
      - application/json
      description: Generates an OTP for password reset
      parameters:
      - description: Forget Password DTO
        in: body
        name: forgetPasswordDTO
        required: true
        schema:
          $ref: '#/definitions/dto.ForgetPasswordDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OTP generated successfully
        "400":
          description: Email not found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Forget Password
      tags:
      - Auth
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates the user and returns a JWT token
      parameters:
      - description: User Login Data
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Invalid request
      summary: Login a user
      tags:
      - Auth
  /api/auth/resetPassword:
    post:
      consumes:
      - application/json
      description: Resets the user's password using OTP
      parameters:
      - description: Reset Password DTO
        in: body
        name: resetPasswordDTO
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
        "400":
          description: Bad Request
        "404":
          description: Email not found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Reset Password
      tags:
      - Auth
  /api/users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users based on the provided query parameters
      parameters:
      - enum:
        - status
        in: query
        name: filter_by
        type: string
      - in: query
        maxLength: 255
        name: keyword
        type: string
      - in: query
        maximum: 20
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 1
        name: page
        type: integer
      - enum:
        - super_admin
        - admin
        - streamer
        - user
        in: query
        name: role
        type: string
      - enum:
        - DESC
        - ASC
        in: query
        name: sort
        type: string
      - enum:
        - created_at
        - updated_at
        - username
        - email
        - display_name
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.PaginationModel-dto_UserResponseDTO'
        "400":
          description: Invalid request
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get paginated list of users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: User Avatar
        in: formData
        name: avatar
        type: file
      - in: formData
        maxLength: 100
        minLength: 3
        name: display_name
        required: true
        type: string
      - in: formData
        maxLength: 100
        name: email
        required: true
        type: string
      - in: formData
        maxLength: 255
        minLength: 8
        name: password
        required: true
        type: string
      - enum:
        - super_admin
        - admin
        - streamer
        - user
        in: formData
        name: role_type
        required: true
        type: string
        x-enum-varnames:
        - SUPPERADMINROLE
        - ADMINROLE
        - STREAMER
        - USERROLE
      - in: formData
        maxLength: 50
        minLength: 3
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully
        "400":
          description: Invalid request
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Create a new user
      tags:
      - Users
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully
        "400":
          description: Invalid ID parameter
        "404":
          description: Not found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Delete user by ID
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponseDTO'
        "400":
          description: Invalid ID parameter
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update the details of a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update User Request
        in: body
        name: UpdateUserRequest
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateUserResponse'
        "400":
          description: Invalid request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Update user details
      tags:
      - Users
  /api/users/{id}/change-avatar:
    patch:
      consumes:
      - application/json
      description: Change the avatar of a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Avatar
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateUserResponse'
        "400":
          description: Invalid request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Change user avatar
      tags:
      - Users
  /api/users/{id}/change-password:
    patch:
      consumes:
      - application/json
      description: Change the password of a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Change Password Request
        in: body
        name: ChangePasswordRequest
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateUserResponse'
        "400":
          description: Invalid request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Change user password
      tags:
      - Users
  /api/users/{id}/deactive:
    patch:
      consumes:
      - application/json
      description: Deactive a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Deactive User
        in: body
        name: DeactiveUserRequest
        required: true
        schema:
          $ref: '#/definitions/dto.DeactiveUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateUserResponse'
        "400":
          description: Invalid ID parameter
        "404":
          description: Not found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Deactive user by ID
      tags:
      - Users
  /api/users/{id}/reactive:
    patch:
      consumes:
      - application/json
      description: Reactive a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateUserResponse'
        "400":
          description: Invalid ID parameter
        "404":
          description: Not found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Reactive user by ID
      tags:
      - Users
  /api/users/statistics:
    get:
      consumes:
      - application/json
      description: Get statistics for users based on the provided criteria
      parameters:
      - in: query
        maxLength: 255
        name: keyword
        type: string
      - in: query
        maximum: 20
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 1
        name: page
        type: integer
      - enum:
        - user
        - streamer
        in: query
        name: role_type
        type: string
      - enum:
        - DESC
        - ASC
        in: query
        name: sort
        type: string
      - enum:
        - username
        - display_name
        - total_streams
        - total_likes
        - total_comments
        - total_views
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.PaginationModel-dto_UserStatisticsResponse'
        "400":
          description: Invalid request
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get user statistics
      tags:
      - Users
  /api/users/usernames:
    get:
      consumes:
      - application/json
      description: Get a list of all usernames
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get list of usernames
      tags:
      - Users
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
