// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/logs": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get logs for the current admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get Admin Logs",
                "parameters": [
                    {
                        "description": "Admin Log Query",
                        "name": "adminLogQuery",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AdminLogQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin logs",
                        "schema": {
                            "$ref": "#/definitions/utils.PaginationModel-dto_AdminLogRespDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/admin/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get admin details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get Admin by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Admin ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin details",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid ID parameter or not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/auth/forgetPassword": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Generates an OTP for password reset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Forget Password",
                "parameters": [
                    {
                        "description": "Forget Password DTO",
                        "name": "forgetPasswordDTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ForgetPasswordDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP generated successfully"
                    },
                    "400": {
                        "description": "Email not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "description": "Authenticates the user and returns a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User Login Data",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    }
                }
            }
        },
        "/api/auth/resetPassword": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Resets the user's password using OTP",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Reset Password",
                "parameters": [
                    {
                        "description": "Reset Password DTO",
                        "name": "resetPasswordDTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ResetPasswordDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successfully"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Email not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AdminLogQuery": {
            "type": "object",
            "properties": {
                "filterBy": {
                    "type": "string",
                    "enum": [
                        "action",
                        "details",
                        "id",
                        "username",
                        "email"
                    ]
                },
                "isMe": {
                    "type": "boolean"
                },
                "keyword": {
                    "type": "string",
                    "maxLength": 255
                },
                "limit": {
                    "type": "integer",
                    "maximum": 20,
                    "minimum": 1
                },
                "page": {
                    "type": "integer",
                    "minimum": 1
                },
                "sort": {
                    "type": "string",
                    "enum": [
                        "DESC",
                        "ASC"
                    ]
                },
                "sortBy": {
                    "type": "string",
                    "enum": [
                        "performed_at"
                    ]
                }
            }
        },
        "dto.AdminLogRespDTO": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "details": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "performed_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/dto.UserResponseDTO"
                }
            }
        },
        "dto.ForgetPasswordDTO": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 100
                }
            }
        },
        "dto.LoginDTO": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 100
                },
                "password": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 8
                }
            }
        },
        "dto.LoginResponse": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expired_time": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "role": {
                    "$ref": "#/definitions/model.RoleType"
                },
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.ResetPasswordDTO": {
            "type": "object",
            "required": [
                "confirmPassword",
                "otp",
                "password"
            ],
            "properties": {
                "confirmPassword": {
                    "type": "string",
                    "minLength": 8
                },
                "otp": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "dto.RoleDTO": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/model.RoleType"
                },
                "updated_at": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserResponseDTO"
                    }
                }
            }
        },
        "dto.UserResponseDTO": {
            "type": "object",
            "properties": {
                "avatar_file_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "$ref": "#/definitions/dto.UserResponseDTO"
                },
                "created_by_id": {
                    "type": "integer"
                },
                "deleted_by_id": {
                    "type": "integer"
                },
                "display_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "role": {
                    "$ref": "#/definitions/dto.RoleDTO"
                },
                "role_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "$ref": "#/definitions/dto.UserResponseDTO"
                },
                "updated_by_id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.RoleType": {
            "type": "string",
            "enum": [
                "super_admin",
                "admin",
                "streamer",
                "user"
            ],
            "x-enum-varnames": [
                "SUPPERADMINROLE",
                "ADMINROLE",
                "STREAMER",
                "USERROLE"
            ]
        },
        "utils.PaginationModel-dto_AdminLogRespDTO": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer"
                },
                "exec_time": {
                    "type": "number"
                },
                "index": {
                    "type": "integer"
                },
                "is_new_filter": {
                    "type": "boolean"
                },
                "length": {
                    "type": "integer"
                },
                "next": {
                    "type": "integer"
                },
                "obj": {
                    "type": "object",
                    "additionalProperties": true
                },
                "page": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AdminLogRespDTO"
                    }
                },
                "page_size": {
                    "type": "integer"
                },
                "previous": {
                    "type": "integer"
                },
                "query": {
                    "type": "string"
                },
                "route": {
                    "type": "string"
                },
                "total_items": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
