{
    "swagger": "2.0",
    "info": {
        "description": "Swagger API Admin Live Stream.",
        "title": "Admin API Live Stream",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8686",
    "basePath": "/",
    "paths": {
        "/api/admins/actions": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get actions for admin logs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get Admin Actions",
                "responses": {
                    "200": {
                        "description": "Admin actions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/admins/logs": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get logs for the current admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get Admin Logs",
                "parameters": [
                    {
                        "maxLength": 255,
                        "type": "string",
                        "name": "action",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "details",
                            "username",
                            "email"
                        ],
                        "type": "string",
                        "name": "filter_by",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "is_me",
                        "in": "query"
                    },
                    {
                        "maxLength": 255,
                        "type": "string",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "maximum": 20,
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "DESC",
                            "ASC"
                        ],
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "performed_at"
                        ],
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin logs",
                        "schema": {
                            "$ref": "#/definitions/utils.PaginationModel-dto_AdminLogRespDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/admins/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get admin details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get Admin by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Admin ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin details",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid ID parameter or not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/auth/forgetPassword": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Generates an OTP for password reset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Forget Password",
                "parameters": [
                    {
                        "description": "Forget Password DTO",
                        "name": "forgetPasswordDTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ForgetPasswordDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP generated successfully"
                    },
                    "400": {
                        "description": "Email not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "description": "Authenticates the user and returns a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User Login Data",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    }
                }
            }
        },
        "/api/auth/resetPassword": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Resets the user's password using OTP",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Reset Password",
                "parameters": [
                    {
                        "description": "Reset Password DTO",
                        "name": "resetPasswordDTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ResetPasswordDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successfully"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Email not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a paginated list of users based on the provided query parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get paginated list of users",
                "parameters": [
                    {
                        "enum": [
                            "status"
                        ],
                        "type": "string",
                        "name": "filter_by",
                        "in": "query"
                    },
                    {
                        "maxLength": 255,
                        "type": "string",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "maximum": 20,
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "super_admin",
                            "admin",
                            "streamer",
                            "user"
                        ],
                        "type": "string",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "DESC",
                            "ASC"
                        ],
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "created_at",
                            "updated_at",
                            "username",
                            "email",
                            "display_name"
                        ],
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.PaginationModel-dto_UserResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new user with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "type": "file",
                        "description": "User Avatar",
                        "name": "avatar",
                        "in": "formData"
                    },
                    {
                        "maxLength": 100,
                        "minLength": 3,
                        "type": "string",
                        "name": "display_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 100,
                        "type": "string",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 255,
                        "minLength": 8,
                        "type": "string",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "enum": [
                            "super_admin",
                            "admin",
                            "streamer",
                            "user"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "SUPPERADMINROLE",
                            "ADMINROLE",
                            "STREAMER",
                            "USERROLE"
                        ],
                        "name": "role_type",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 50,
                        "minLength": 3,
                        "type": "string",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/users/statistics": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get statistics for users based on the provided criteria",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user statistics",
                "parameters": [
                    {
                        "maxLength": 255,
                        "type": "string",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "maximum": 20,
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "user",
                            "streamer"
                        ],
                        "type": "string",
                        "name": "role_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "DESC",
                            "ASC"
                        ],
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "username",
                            "display_name",
                            "total_streams",
                            "total_likes",
                            "total_comments",
                            "total_views"
                        ],
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.PaginationModel-dto_UserStatisticsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/users/usernames": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a list of all usernames",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get list of usernames",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid ID parameter"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update the details of a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update User Request",
                        "name": "UpdateUserRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully"
                    },
                    "400": {
                        "description": "Invalid ID parameter"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/users/{id}/change-avatar": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Change the avatar of a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Change user avatar",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "User Avatar",
                        "name": "avatar",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/users/{id}/change-password": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Change the password of a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Change Password Request",
                        "name": "ChangePasswordRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/users/{id}/deactive": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Deactive a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Deactive user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Deactive User",
                        "name": "DeactiveUserRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DeactiveUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID parameter"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/users/{id}/reactive": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Reactive a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Reactive user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID parameter"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AdminLogRespDTO": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "details": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "performed_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/dto.UserResponseDTO"
                }
            }
        },
        "dto.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "confirm_password",
                "password"
            ],
            "properties": {
                "confirm_password": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 8
                },
                "password": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 8
                }
            }
        },
        "dto.DeactiveUserRequest": {
            "type": "object",
            "required": [
                "reason"
            ],
            "properties": {
                "reason": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                }
            }
        },
        "dto.ForgetPasswordDTO": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 100
                }
            }
        },
        "dto.LoginDTO": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 100
                },
                "password": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 8
                }
            }
        },
        "dto.LoginResponse": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expired_time": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "role": {
                    "$ref": "#/definitions/model.RoleType"
                },
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.ResetPasswordDTO": {
            "type": "object",
            "required": [
                "confirmPassword",
                "otp",
                "password"
            ],
            "properties": {
                "confirmPassword": {
                    "type": "string",
                    "minLength": 8
                },
                "otp": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "dto.RoleDTO": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/model.RoleType"
                },
                "updated_at": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserResponseDTO"
                    }
                }
            }
        },
        "dto.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "email": {
                    "type": "string",
                    "maxLength": 100
                },
                "role_type": {
                    "enum": [
                        "admin",
                        "streamer",
                        "user"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.RoleType"
                        }
                    ]
                },
                "updated_by_id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "dto.UpdateUserResponse": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "role": {
                    "$ref": "#/definitions/model.RoleType"
                },
                "status": {
                    "$ref": "#/definitions/model.UserStatusType"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.UserResponseDTO": {
            "type": "object",
            "properties": {
                "avatar_file_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "$ref": "#/definitions/dto.UserResponseDTO"
                },
                "created_by_id": {
                    "type": "integer"
                },
                "deleted_by_id": {
                    "type": "integer"
                },
                "display_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "role": {
                    "$ref": "#/definitions/dto.RoleDTO"
                },
                "role_id": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/model.UserStatusType"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "$ref": "#/definitions/dto.UserResponseDTO"
                },
                "updated_by_id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.UserStatisticsResponse": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "role_type": {
                    "$ref": "#/definitions/model.RoleType"
                },
                "total_comments": {
                    "type": "integer"
                },
                "total_likes": {
                    "type": "integer"
                },
                "total_streams": {
                    "type": "integer"
                },
                "total_views": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.RoleType": {
            "type": "string",
            "enum": [
                "super_admin",
                "admin",
                "streamer",
                "user"
            ],
            "x-enum-varnames": [
                "SUPPERADMINROLE",
                "ADMINROLE",
                "STREAMER",
                "USERROLE"
            ]
        },
        "model.UserStatusType": {
            "type": "string",
            "enum": [
                "online",
                "offline",
                "blocked"
            ],
            "x-enum-varnames": [
                "ONLINE",
                "OFFLINE",
                "BLOCKED"
            ]
        },
        "utils.PaginationModel-dto_AdminLogRespDTO": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer"
                },
                "exec_time": {
                    "type": "number"
                },
                "index": {
                    "type": "integer"
                },
                "is_new_filter": {
                    "type": "boolean"
                },
                "length": {
                    "type": "integer"
                },
                "next": {
                    "type": "integer"
                },
                "obj": {
                    "type": "object",
                    "additionalProperties": true
                },
                "page": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AdminLogRespDTO"
                    }
                },
                "page_size": {
                    "type": "integer"
                },
                "previous": {
                    "type": "integer"
                },
                "query": {
                    "type": "string"
                },
                "route": {
                    "type": "string"
                },
                "total_items": {
                    "type": "integer"
                }
            }
        },
        "utils.PaginationModel-dto_UserResponseDTO": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer"
                },
                "exec_time": {
                    "type": "number"
                },
                "index": {
                    "type": "integer"
                },
                "is_new_filter": {
                    "type": "boolean"
                },
                "length": {
                    "type": "integer"
                },
                "next": {
                    "type": "integer"
                },
                "obj": {
                    "type": "object",
                    "additionalProperties": true
                },
                "page": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserResponseDTO"
                    }
                },
                "page_size": {
                    "type": "integer"
                },
                "previous": {
                    "type": "integer"
                },
                "query": {
                    "type": "string"
                },
                "route": {
                    "type": "string"
                },
                "total_items": {
                    "type": "integer"
                }
            }
        },
        "utils.PaginationModel-dto_UserStatisticsResponse": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer"
                },
                "exec_time": {
                    "type": "number"
                },
                "index": {
                    "type": "integer"
                },
                "is_new_filter": {
                    "type": "boolean"
                },
                "length": {
                    "type": "integer"
                },
                "next": {
                    "type": "integer"
                },
                "obj": {
                    "type": "object",
                    "additionalProperties": true
                },
                "page": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserStatisticsResponse"
                    }
                },
                "page_size": {
                    "type": "integer"
                },
                "previous": {
                    "type": "integer"
                },
                "query": {
                    "type": "string"
                },
                "route": {
                    "type": "string"
                },
                "total_items": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}